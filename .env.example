# =============================================================================
# BlingAuto API - Environment Configuration Template
# Copy this file to .env and update with your actual values
# NEVER commit the .env file to version control!
# =============================================================================

# -------------------------
# Application Configuration
# -------------------------
ENVIRONMENT=production
APP_NAME=BlingAuto API
APP_VERSION=1.0.0
DEBUG=false

# -------------------------
# Server Configuration
# -------------------------
HOST=0.0.0.0
PORT=8000
WORKERS=4

# -------------------------
# Database Configuration (PostgreSQL)
# -------------------------
# For Docker: Use these values
POSTGRES_DB=blingauto
POSTGRES_USER=blingauto_user
POSTGRES_PASSWORD=change_this_password_to_secure_value
POSTGRES_PORT=5432

# Database URL (auto-constructed in docker-compose, or set manually)
DATABASE_URL=postgresql+asyncpg://blingauto_user:change_this_password_to_secure_value@postgres:5432/blingauto

# Database Pool Settings
DATABASE_POOL_SIZE=10
DATABASE_MAX_OVERFLOW=20
DATABASE_POOL_TIMEOUT=30
DATABASE_ECHO=false

# -------------------------
# Redis Configuration
# -------------------------
REDIS_PASSWORD=change_this_redis_password_to_secure_value
REDIS_PORT=6379
REDIS_URL=redis://:change_this_redis_password_to_secure_value@redis:6379/0
REDIS_MAX_CONNECTIONS=20
REDIS_TTL=300

# -------------------------
# Security Configuration
# -------------------------
# IMPORTANT: Generate a secure random secret key
# Run: python -c "import secrets; print(secrets.token_urlsafe(64))"
SECRET_KEY=your-secret-key-here-change-in-production-use-64-char-random-string

# JWT Configuration
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=15
REFRESH_TOKEN_EXPIRE_DAYS=7
PASSWORD_RESET_TOKEN_EXPIRE_HOURS=1
EMAIL_VERIFICATION_TOKEN_EXPIRE_HOURS=24

# Account Security
MAX_LOGIN_ATTEMPTS=5
LOCKOUT_DURATION_MINUTES=30
PASSWORD_MIN_LENGTH=8
PASSWORD_MAX_LENGTH=128

# -------------------------
# Initial Admin User (Optional)
# -------------------------
# These credentials will be used to create a default admin user on first startup
# Leave empty to skip admin user creation
INITIAL_ADMIN_EMAIL=admin@blingauto.com
INITIAL_ADMIN_PASSWORD=ChangeThisSecurePassword123!
INITIAL_ADMIN_FIRST_NAME=Admin
INITIAL_ADMIN_LAST_NAME=User

# -------------------------
# Email Configuration (Optional)
# -------------------------
# Leave empty to disable email functionality
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your-email@gmail.com
SMTP_PASSWORD=your-app-specific-password
SMTP_FROM_EMAIL=noreply@blingauto.com
SMTP_FROM_NAME=BlingAuto
SMTP_USE_TLS=true

# Frontend URL for email links
FRONTEND_URL=http://localhost:3000

# -------------------------
# CORS Configuration
# -------------------------
# Comma-separated list of allowed origins
CORS_ORIGINS=http://localhost:3000,http://localhost:5173,https://yourdomain.com
CORS_ALLOW_CREDENTIALS=true

# -------------------------
# Rate Limiting
# -------------------------
RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS_PER_MINUTE=60
RATE_LIMIT_REQUESTS_PER_HOUR=1000

# -------------------------
# Logging Configuration
# -------------------------
LOG_LEVEL=INFO
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s

# -------------------------
# Business Rules Configuration
# -------------------------
MAX_SERVICES_PER_BOOKING=10
MIN_BOOKING_DURATION_MINUTES=30
MAX_BOOKING_DURATION_MINUTES=240
MAX_BOOKING_ADVANCE_DAYS=90
MIN_BOOKING_ADVANCE_HOURS=2
BOOKING_SLOT_DURATION_MINUTES=30
BOOKING_BUFFER_MINUTES=15

# -------------------------
# Docker Compose Ports (External Access)
# -------------------------
API_PORT=8000

# =============================================================================
# PRODUCTION DEPLOYMENT CHECKLIST
# =============================================================================
# Before deploying to production, ensure:
#
# 1. Generate strong secrets:
#    - SECRET_KEY: python -c "import secrets; print(secrets.token_urlsafe(64))"
#    - POSTGRES_PASSWORD: Use a password manager (minimum 20 characters)
#    - REDIS_PASSWORD: Use a password manager (minimum 20 characters)
#
# 2. Configure production database (PostgreSQL):
#    - Update POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB
#    - Update DATABASE_URL with correct credentials
#    - Consider SSL connection for remote database
#
# 3. Set up Redis:
#    - Update REDIS_PASSWORD with secure value
#    - Update REDIS_URL with correct credentials
#    - For production: Use managed Redis (AWS ElastiCache, Redis Cloud, etc.)
#
# 4. Configure email provider (if needed):
#    - Set SMTP_HOST, SMTP_USERNAME, SMTP_PASSWORD
#    - Use app-specific passwords for Gmail
#    - Consider using services like SendGrid, Mailgun, or AWS SES
#
# 5. Update application settings:
#    - Set ENVIRONMENT=production
#    - Set DEBUG=false
#    - Update CORS_ORIGINS with your actual frontend domain
#    - Update FRONTEND_URL with your actual frontend URL
#
# 6. Configure workers:
#    - Set WORKERS based on CPU cores (recommended: 2 * CPU_CORES + 1)
#    - Example: 4 CPU cores = 9 workers
#
# 7. Configure initial admin user:
#    - Set INITIAL_ADMIN_EMAIL (e.g., admin@yourdomain.com)
#    - Set INITIAL_ADMIN_PASSWORD (use strong password, minimum 12 characters)
#    - Change admin password after first login!
#
# 8. Review security settings:
#    - MAX_LOGIN_ATTEMPTS, LOCKOUT_DURATION_MINUTES
#    - PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH
#    - TOKEN expiration times
#
# 9. Setup monitoring and logging:
#    - Set LOG_LEVEL=INFO for production (or WARNING for less verbosity)
#    - Configure external logging service (Sentry, Datadog, etc.)
#
# 10. Copy this file:
#     cp .env.example .env
#     # Then edit .env with your actual values
#
# 11. NEVER commit .env to version control!
#     - Verify .env is in .gitignore
# =============================================================================