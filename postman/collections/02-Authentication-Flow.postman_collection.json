{
  "info": {
    "name": "02 - Authentication & User Management",
    "description": "Complete authentication flow with user registration, login, token refresh, and RBAC testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Scenario 1: User Registration Flow",
      "description": "Complete user registration including email verification",
      "item": [
        {
          "name": "Register New Client",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique email for testing",
                  "const timestamp = Date.now();",
                  "pm.environment.set('test_client_email', `client_${timestamp}@test.com`);",
                  "pm.environment.set('test_client_password', 'TestClient123!');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201 Created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('full_name');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    ",
                  "    // Save user ID for later use",
                  "    pm.environment.set('test_client_id', jsonData.user_id);",
                  "});",
                  "",
                  "pm.test(\"Email matches registration email\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.email).to.eql(pm.environment.get('test_client_email'));",
                  "});",
                  "",
                  "pm.test(\"Full name is formatted correctly\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.full_name).to.eql('Test Client');",
                  "});",
                  "",
                  "pm.test(\"Success message is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Registration successful');",
                  "    pm.expect(jsonData.message).to.include('verify');",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_client_email}}\",\n  \"password\": \"{{test_client_password}}\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"Client\",\n  \"phone_number\": \"+1234567890\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "register"]
            }
          }
        },
        {
          "name": "Cannot Login Unverified User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 or 403\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([401, 403]);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions verification or inactive\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const message = jsonData.error.message.toLowerCase();",
                  "    pm.expect(message).to.match(/verif|inactive|active/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_client_email}}\",\n  \"password\": \"{{test_client_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "login"]
            }
          }
        },
        {
          "name": "Duplicate Email Registration Fails",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 or 422\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 422]);",
                  "});",
                  "",
                  "pm.test(\"Error mentions duplicate or existing email\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const message = jsonData.error ? jsonData.error.message.toLowerCase() : jsonData.detail.toLowerCase();",
                  "    pm.expect(message).to.match(/duplicate|exist|already/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_client_email}}\",\n  \"password\": \"AnotherPass123!\",\n  \"first_name\": \"Another\",\n  \"last_name\": \"User\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "register"]
            }
          }
        }
      ]
    },
    {
      "name": "Scenario 2: Admin Login & Token Management",
      "description": "Admin login, token refresh, and session management",
      "item": [
        {
          "name": "Admin Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has tokens\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData).to.have.property('refresh_token');",
                  "    pm.expect(jsonData).to.have.property('token_type');",
                  "    pm.expect(jsonData.token_type).to.eql('bearer');",
                  "    ",
                  "    // Save tokens to environment",
                  "    pm.environment.set('access_token', jsonData.access_token);",
                  "    pm.environment.set('refresh_token', jsonData.refresh_token);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('user_id');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('role');",
                  "    ",
                  "    // Save user ID",
                  "    pm.environment.set('user_id', jsonData.user.user_id);",
                  "});",
                  "",
                  "pm.test(\"User role is admin\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user.role).to.eql('admin');",
                  "});",
                  "",
                  "pm.test(\"Token expiry is set\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('expires_in');",
                  "    pm.expect(jsonData.expires_in).to.be.above(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{admin_email}}\",\n  \"password\": \"{{admin_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "login"]
            }
          }
        },
        {
          "name": "Get Current User (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User data is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user_id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('role');",
                  "    pm.expect(jsonData.role).to.eql('admin');",
                  "});",
                  "",
                  "pm.test(\"Email matches admin email\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.email).to.eql(pm.environment.get('admin_email'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "me"]
            }
          }
        },
        {
          "name": "Refresh Access Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"New tokens are provided\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.expect(jsonData).to.have.property('refresh_token');",
                  "    ",
                  "    // Update tokens",
                  "    pm.environment.set('access_token', jsonData.access_token);",
                  "    pm.environment.set('refresh_token', jsonData.refresh_token);",
                  "});",
                  "",
                  "pm.test(\"Token type is bearer\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token_type).to.eql('bearer');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/refresh",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "refresh"]
            }
          }
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
                  "});",
                  "",
                  "// Clear tokens after logout",
                  "pm.environment.set('access_token', '');",
                  "pm.environment.set('refresh_token', '');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/logout",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "logout"]
            }
          }
        }
      ]
    },
    {
      "name": "Scenario 3: Password Management",
      "description": "Change password and password reset flow",
      "item": [
        {
          "name": "Login as Client First",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "pm.environment.set('access_token', jsonData.access_token);",
                  "pm.environment.set('refresh_token', jsonData.refresh_token);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{client_email}}\",\n  \"password\": \"{{client_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "login"]
            }
          }
        },
        {
          "name": "Change Password",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.environment.set('new_client_password', 'NewClientPass123!');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Success message is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "// Update client password in environment",
                  "pm.environment.set('client_password', pm.environment.get('new_client_password'));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"current_password\": \"ClientPass123!\",\n  \"new_password\": \"{{new_client_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/change-password",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "change-password"]
            }
          }
        },
        {
          "name": "Login with New Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"New password works\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{client_email}}\",\n  \"password\": \"{{new_client_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "login"]
            }
          }
        },
        {
          "name": "Request Password Reset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 202\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 202]);",
                  "});",
                  "",
                  "pm.test(\"Success message is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{client_email}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/forgot-password",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "forgot-password"]
            }
          }
        }
      ]
    },
    {
      "name": "Scenario 4: RBAC Testing",
      "description": "Test role-based access control across different user types",
      "item": [
        {
          "name": "Login as Manager",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "pm.environment.set('manager_token', jsonData.access_token);",
                  "pm.environment.set('manager_id', jsonData.user.user_id);",
                  "",
                  "pm.test(\"User role is manager\", function () {",
                  "    pm.expect(jsonData.user.role).to.eql('manager');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{manager_email}}\",\n  \"password\": \"{{manager_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "login"]
            }
          }
        },
        {
          "name": "Manager Can List Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User list is returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('items');",
                  "    pm.expect(jsonData.items).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{manager_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/users?page=1&limit=20",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "20"
                }
              ]
            }
          }
        },
        {
          "name": "Login as Washer",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "var jsonData = pm.response.json();",
                  "pm.environment.set('washer_token', jsonData.access_token);",
                  "pm.environment.set('washer_id', jsonData.user.user_id);",
                  "",
                  "pm.test(\"User role is washer\", function () {",
                  "    pm.expect(jsonData.user.role).to.eql('washer');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{washer_email}}\",\n  \"password\": \"{{washer_password}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "login"]
            }
          }
        },
        {
          "name": "Washer Cannot List Users",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403 Forbidden\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions permissions\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const message = jsonData.error ? jsonData.error.message.toLowerCase() : jsonData.detail.toLowerCase();",
                  "    pm.expect(message).to.match(/permission|forbidden|access/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{washer_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/users",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "users"]
            }
          }
        }
      ]
    },
    {
      "name": "Scenario 5: Failed Login Attempts & Security",
      "description": "Test account lockout and security features",
      "item": [
        {
          "name": "Failed Login Attempt 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions invalid credentials\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const message = jsonData.error ? jsonData.error.message.toLowerCase() : jsonData.detail.toLowerCase();",
                  "    pm.expect(message).to.match(/invalid|incorrect|wrong/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{client_email}}\",\n  \"password\": \"WrongPassword123!\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "login"]
            }
          }
        },
        {
          "name": "Access Protected Endpoint Without Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error mentions authentication\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const message = jsonData.error ? jsonData.error.message.toLowerCase() : jsonData.detail.toLowerCase();",
                  "    pm.expect(message).to.match(/auth|token|unauthorized|credentials/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "me"]
            }
          }
        },
        {
          "name": "Access Protected Endpoint With Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 Unauthorized\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error mentions invalid token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    const message = jsonData.error ? jsonData.error.message.toLowerCase() : jsonData.detail.toLowerCase();",
                  "    pm.expect(message).to.match(/invalid|token|expired|credentials/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token_here"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/{{api_version}}/auth/me",
              "host": ["{{base_url}}"],
              "path": ["api", "{{api_version}}", "auth", "me"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script for authentication collection",
          "pm.environment.set('timestamp', new Date().toISOString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "if (pm.response.code !== 404 && pm.response.code !== 500) {",
          "    pm.test(\"Response has proper Content-Type\", function () {",
          "        pm.response.to.have.header('Content-Type');",
          "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "    });",
          "}"
        ]
      }
    }
  ]
}
