version: '3.8'

# =============================================================================
# BlingAuto API - Pre-Production with Let's Encrypt SSL
# Complete setup with automatic SSL certificate generation
# =============================================================================

services:
  # Nginx Reverse Proxy with Certbot
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: blingauto-nginx-preprod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - blingauto-network
    volumes:
      - ./nginx/nginx-letsencrypt.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/html:/usr/share/nginx/html:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      com.blingauto.service: "nginx"
      com.blingauto.environment: "preprod"

  # Certbot for Let's Encrypt SSL certificates
  certbot:
    image: certbot/certbot:latest
    container_name: blingauto-certbot-preprod
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    labels:
      com.blingauto.service: "certbot"
      com.blingauto.environment: "preprod"

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: blingauto-postgres-preprod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-blingauto_preprod}
      POSTGRES_USER: ${POSTGRES_USER:-blingauto_preprod}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.utf8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_preprod_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./backups:/backups
    networks:
      - blingauto-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-blingauto_preprod} -d ${POSTGRES_DB:-blingauto_preprod}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    labels:
      com.blingauto.service: "postgres"
      com.blingauto.environment: "preprod"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: blingauto-redis-preprod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1
      --loglevel warning
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_preprod_data:/data
    networks:
      - blingauto-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    labels:
      com.blingauto.service: "redis"
      com.blingauto.environment: "preprod"

  # BlingAuto API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: blingauto-api-preprod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-staging}
      APP_NAME: ${APP_NAME:-BlingAuto API - Pre-Production}
      APP_VERSION: ${APP_VERSION:-1.0.0}
      DEBUG: ${DEBUG:-false}

      # Server
      HOST: 0.0.0.0
      PORT: 8000
      WORKERS: ${WORKERS:-4}

      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-blingauto_preprod}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-blingauto_preprod}
      DATABASE_POOL_SIZE: ${DATABASE_POOL_SIZE:-10}
      DATABASE_MAX_OVERFLOW: ${DATABASE_MAX_OVERFLOW:-20}
      DATABASE_POOL_TIMEOUT: ${DATABASE_POOL_TIMEOUT:-30}
      DATABASE_ECHO: ${DATABASE_ECHO:-false}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      REDIS_MAX_CONNECTIONS: ${REDIS_MAX_CONNECTIONS:-20}
      REDIS_TTL: ${REDIS_TTL:-300}

      # Security
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-15}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      PASSWORD_RESET_TOKEN_EXPIRE_HOURS: ${PASSWORD_RESET_TOKEN_EXPIRE_HOURS:-1}
      EMAIL_VERIFICATION_TOKEN_EXPIRE_HOURS: ${EMAIL_VERIFICATION_TOKEN_EXPIRE_HOURS:-24}

      # Email
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_FROM_EMAIL: ${SMTP_FROM_EMAIL:-noreply@blingauto.com}
      SMTP_FROM_NAME: ${SMTP_FROM_NAME:-BlingAuto PreProd}
      SMTP_USE_TLS: ${SMTP_USE_TLS:-true}
      FRONTEND_URL: ${FRONTEND_URL}

      # Rate Limiting
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_REQUESTS_PER_MINUTE: ${RATE_LIMIT_REQUESTS_PER_MINUTE:-60}
      RATE_LIMIT_REQUESTS_PER_HOUR: ${RATE_LIMIT_REQUESTS_PER_HOUR:-1000}

      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS}
      CORS_ALLOW_CREDENTIALS: ${CORS_ALLOW_CREDENTIALS:-true}

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # Account Security
      MAX_LOGIN_ATTEMPTS: ${MAX_LOGIN_ATTEMPTS:-5}
      LOCKOUT_DURATION_MINUTES: ${LOCKOUT_DURATION_MINUTES:-30}
      PASSWORD_MIN_LENGTH: ${PASSWORD_MIN_LENGTH:-8}
      PASSWORD_MAX_LENGTH: ${PASSWORD_MAX_LENGTH:-128}

      # Initial Admin User
      INITIAL_ADMIN_EMAIL: ${INITIAL_ADMIN_EMAIL}
      INITIAL_ADMIN_PASSWORD: ${INITIAL_ADMIN_PASSWORD}
      INITIAL_ADMIN_FIRST_NAME: ${INITIAL_ADMIN_FIRST_NAME:-Admin}
      INITIAL_ADMIN_LAST_NAME: ${INITIAL_ADMIN_LAST_NAME:-PreProd}
    networks:
      - blingauto-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      com.blingauto.service: "api"
      com.blingauto.environment: "preprod"

  # Database Migration Runner
  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: blingauto-migrations-preprod
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-blingauto_preprod}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-blingauto_preprod}
    command: ["alembic", "upgrade", "head"]
    networks:
      - blingauto-network
    restart: "no"
    labels:
      com.blingauto.service: "migrations"
      com.blingauto.environment: "preprod"

# Networks
networks:
  blingauto-network:
    driver: bridge
    name: blingauto-preprod-network

# Volumes
volumes:
  postgres_preprod_data:
    name: blingauto-postgres-preprod-data
    driver: local
  redis_preprod_data:
    name: blingauto-redis-preprod-data
    driver: local
  nginx_logs:
    name: blingauto-nginx-preprod-logs
    driver: local
